(load "helpers.scm")

(define (variable? x) (symbol? x))

(define (same-variable? v1 v2)
	(and (variable? v1) (variable? v2) (eq? v1 v2)))

(define (eq-number? x num) (and (number? x) (= x num)))

(define (make-sum . items)
	(define (mk-exp this rest)
	  (define (drop-parenth x)
	    (if (pair? x)
	        x
	        (list x)))
		(append 
			(if (null? rest)
			    (drop-parenth this)
			    (append (drop-parenth this) (list '+)))
			rest))
  (let ((sum-numbers (accumulate + 0 (filter number? items)))
  			(terms (filter (lambda (x) (not (number? x))) items)))
  	(cond ((null? terms) sum-numbers)
  	      ((= 0 sum-numbers) 
  	       (accumulate mk-exp '() terms))
  	    	(else (append (accumulate mk-exp '() terms)
  	    								(list '+ sum-numbers))))))
(define (sum? x) (and (pair? x) (pair? (memq '+ x))))
(define (addend s)
  (if (eq? (car s) '+)
      ()
      (cons (car s) (addend (cdr s)))))
(define (augend s) (cdr (memq '+ s))) 

(define (make-product . items)
	(define (mk-exp this rest)
		(append 
			(if (null? rest)
			    (list this)
			    (list this '*)))
			rest)
  (let ((product-numbers (accumulate * 1 (filter number? items)))
  			(terms (filter (lambda (x) (not (number? x))) items)))
  	(cond ((= 0 product-numbers) 0)
  	      ((= 1 product-numbers) (accumulate mk-exp '() terms))
  	    	(else (append (accumulate mk-exp '() terms)
  	    								(list '* product-numbers))))))
(define (product? x)
  (and (pair? x)
  		 (not (sum? x))
  		 (pair? (memq '* x))))
(define (multiplier p) (car p))
(define (multiplicand p) (cdr (memq '* p)))

