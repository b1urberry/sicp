(load "helpers.scm")

(define (make-sum . items)
  (let ((sum-numbers (accumulate + 0 (filter number? items)))
  			(terms (filter (lambda (x) (not (number? x))) items)))
  	(cond ((null? terms) sum-numbers)
  	      ((= 0 sum-numbers) (cons '+ terms))
  	    	(else (append (cons '+ terms)
  	    								(list sum-numbers))))))
(define (addend s) (cadr s))
(define (augend s) (make-sum (cddr s)))

(define (make-product . items)
  (let ((product-numbers (accumulate * 1 (filter number? items)))
  			(terms (filter (lambda (x) (not (number? x))) items)))
  	(cond ((= 0 product-numbers) 0)
  	      ((= 1 product-numbers) (cons '* terms))
  	    	(else (append (cons '* terms)
  	    								(list product-numbers))))))
(define (multipier p) (cadr p))
(define (multiplicand p) (make-product (cddr p)))