(define (serialized-exchange account1 account2)
  (let ((serializer1 (account1 'serializer))
  			(serializer2 (account2 'serializer))
  			(id1 (account1 'acct-num))
  			(id2 (account2 'acct-num)))
  	(if (< id1 id2)
  	    ((serializer1 (serializer2 exchange)) account1 account2)
  	    ((serializer2 (serializer1 exchange)) account1 account2))))

(define (exchange account1 account2)
  (let ((difference (- (account1 'balance) 
                       (account2 'balance))))
  	((account1 'withdraw) difference)
  	((account2 'deposit) difference)))

(define (make-account balance acct-num)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance 
        						 (- balance amount))
      				 balance)
        "Insufficient Funds"))
	(define (deposit amount)
	  (set! balance (+ balance amount))
		balance)
	(let ((balance-serializer (make-serializer)))
		(define (dispatch m)
		  (cond ((eq? m 'withdraw) withdraw)
		        ((eq? m 'deposit) deposit)
		      	((eq? m 'acct-num) acct-num)
		      	((eq? m 'balance) balance)
		      	((eq? m 'serializer) balance-serializer)
		      	(else (error "unknown request: MAKE_ACCOUNT" m))))
		dispatch))

(define (withdraw account amount)
  (let ((s (account 'serializer))
  			(w (account 'withdraw)))
  	((s w) amount)))

(define (deposit account amount)
  (let ((s (account 'serializer))
  			(d (account 'deposit)))
  	((s d) amount)))



(define (make-serializer)
  (let ((the-mutex (make-mutex)))
  	(lambda (p) 
  		(define (serialized-p . args)
  		  (the-mutex 'aquire)
  			(let ((val (apply p args)))
  				(the-mutex 'release)
  				val))
  		serialized-p)))

(define (make-mutex)
  (let ((cell (list false)))
  	(define (the-mutex request)
  	  (cond ((eq? request 'aquire) 
  	  			 (if (test-and-set! cell)
  	  			     (the-mutex 'aquire)))
  	        ((eq? request 'release) (clear! cell))))
  	the-mutex))

(define (test-and-set! cell)
  (without-interrupts
  	(lambda () 
  		(if (car cell)
  		    true
  		    (begin (set-car! cell true)
  		    			 false)))))

(define (clear! cell) (set-car! cell false))