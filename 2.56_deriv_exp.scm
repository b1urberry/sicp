(load "symbolic_helpers.scm")

(define (make-exponentiation base exponent)
	(cond ((eq-number? base 0) 0)
	      ((or (eq-number? base 1) (eq-number? exponent 0)) 1)
	    	((eq-number? exponent 1) base)
	    	((and (number? base) (number? exponent)) (expt base exponent))
	    	(else (list '** base exponent))))
(define (exponentiation? x) (and (pair? x) (eq? (car x) '**)))
(define (base x) (cadr x))
(define (exponent x) (caddr x))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
      	((sum? exp) 
      	 (make-sum (deriv (addend exp) var)
      	 					 (deriv (augend exp) var)))
      	((product? exp)
      	 (make-sum (make-product (deriv (multiplier exp) var)
      	 												 (multiplicand exp))
      						 (make-product (deriv (multiplicand exp) var)
      						 							 (multiplier exp))))
      	((exponentiation? exp) 
      	 (make-product (make-product (make-exponentiation (base exp) (- (exponent exp) 1))
      	 														 (exponent exp))
      	 							 (deriv (base exp) var)))))