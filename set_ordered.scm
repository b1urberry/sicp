(define (element-of-set? x set)
  (cond ((or (null? set) (< x (car set))) false)
        ((= x (car set)) true)
      	(else (element-of-set? x (cdr set)))))

(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
      '()
      (let ((x1 (car set1))
  					(x2 (car set2))
  					(r1	(cdr set1))
  					(r2 (cdr set2)))
  			(cond ((= x1 x2) (cons x1 (intersection-set r1 r2)))
  	     			((< x1 x2) (intersection-set r1 set2))
  	     			(else (intersection-set set1 r2))))))

(define (ajoin-set x set)
  (cond ((null? set) (list x))
        ((= x (car set)) set)
      	((< x (car set)) (cons x set))
      	(else (cons (car set) (ajoin-set x (cdr set))))))

(define (union-set set1 set2)
  (let ((x1 (car set1))
  			(x2	(car set2))
  			(r1	(cdr set1))
  			(r2 (cdr set2)))
  	(cond ((null? set1) set2)
  	      ((null? set2) set1)
  	    	((= x1 x2) (cons x1 (union-set r1 r2)))
  	    	((< x1 x2) (cons x1 (union-set r1 set2)))
  	    	(else (cons x2 (union-set set1 r2))))))